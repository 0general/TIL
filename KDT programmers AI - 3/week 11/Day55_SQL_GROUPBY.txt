1. GROUP BY AGGREGATE 함수
2. CTAS(임시로 사용할 테이블 생성) 와 CTE(subquery)


■ GROUP BY & Aggregate 함수

 ▷ 테이블의 레코드를 그룹핑하여 그룹별로 다양한 정보를 계산
 ▷ 이는 두 단계로 이뤄짐
    ● 먼저 그룹핑을 할 필드를 결정 (하나 이상의 필드가 될 수 있음)
        - GROUP BY로 지정(필드 이름을 사용하거나 필드 일련번호를 사용)
    ● 다음 그룹별로 계산할 내용을 결정
        - 여기서 Aggregate 함수를 사용
        - COUNT, SUM, AVG, MIN, MAX, LISTAGG(← list aggregation할 때 씀), ...
            ○ 보통 필드 이름을 지정하는 것이 일반적 (alias)


■ GROUP BY & Aggregate 함수
 ▷ 월별 세션수를 계산하는 SQL
    ● raw_data.session_timestamp를 사용 (sessionId와 ts 필드)

 SELECT
    LEFT(ts, 7) AS mon,
    COUNT(1) AS session_count,
 FROM raw_data.session_timestamp
 GROUP BY 1 -- or GROUP BY mon or GROUP BY LEFT(ts, 7) 모두 동일한 결과 //  (1은 SELECT의 첫번째 필드를 의미)
 ORDER BY 1; -- 만약 2라고 하면 session_count 기준으로 sorting이 된다.


 LEFT라는 함수는 string만 받을 수 있다.
 ts에서 처음 7자리만 가져오면 'yyyy_mm'만 받아온다


■ 가장 많이 사용된 채널은 무엇인가?

 ▷ 가장 많이 사용되었다는 정의가 무엇인지를 ※반드시 확인※해야 한다. 
    ● 사용자 기반 아니면 세션 기반?

 ▷ 필요한 정보 - 채널 정보, 사용자 정보 혹은 세션 정보
 ▷ 먼저 어느 테이블을 사용해야하는지 생각!
    ● user_session_channel?
    ● session_timestamp?
    ● 혹은 이 2개의 테이블을 조인해야하나?


 SELECT
    channel,
    COUNT(1) AS session_count,
    COUNT(DISTINCT userId) AS user_count
 FROM raw_data.user_session_channel
 GROUP BY 1         -- GROUP BY channel
 ORDER BY 2 DESC;   -- ORDER BY session_count DESC
  

 ※ COUNT함수는 기본적으로 1씩 더해가는 함수이다.
    COUNT의 인자로 주어진 값이 NULL이면 무시하고, NULL이 아니면 무조건 1씩 COUNT된다.


■ 가장 많은 세션을 만들어낸 사용자 ID는 무엇인가?

 ▷ 필요한 정보 - 사용자 정보, 세션 정보
 ▷ 먼저 어느 테이블을 사용해야하는지 생각!
    ● user_session_channel?
    ● session_timestamp?
    ● 혹은 이 2개의 테이블을 조인해야하나?


 SELECT
    userId,
    COUNT(1) AS count 
 FROM raw_data.user_session_channel
 GROUP BY 1       -- GROUP BY userId
 ORDER BY 2 DESC  -- ORDER BY count DESC
 LIMIT 1;


■ 월별 유니크한 사용자 수 

 ▷ 이게 바로 MAU(Monthly Active User)에 해당
 ▷ 필요한 정보 - 시간 정보, 사용자 정보
 ▷ 먼저 어느 테이블을 사용해야하는지 생각!
    ● user_session_channel(userId, sessionId, channel)?
    ● session_timestamp (sessionId, ts)?
    ● 혹은 이 2개의 테이블을 조인해야하나?


 merge → JOIN 
 JOIN은 두 테이블간의 공통된 필드를 기반으로 두 개의 레코드를 하나로 묶어줘야 한다.


 양쪽에 매칭이 되는 레코드만을 남겨두고 매칭되지 않는 나머지는 버리는 inner join 수행



 SELECT
    TO_CHAR(A.ts, 'YYYY_MM') AS month,
    COUNT(DISTINCT B.userId) AS mau
 FROM raw_data.session_timestamp A  -- 이 테이블을 A라고 부르기로 함 alias
 JOIN raw_data.user_session_channel B ON A.sessionId = B.sessionId
 GROUP BY 1
 ORDER BY 1 DESC;


※ AS 는 OPTIONAL, 반드시 적지는 않아도 됨.


※ 다음 함수의 각각 장단점?
 ● TO_CHAR(A.ts, 'YYYY_MM') ← 타임스탬프 field를 인자로 받아서 문자열로 바꿔주는 TO_CHAR 함수
 ● LEFT(A.ts, 7)
 ● DATE_TRUNC('month', A.ts) ← 다른 함수들이랑 달리 유일하게 첫 번째 인자 단위에 맞춰서 타임스탬프로 반환, 
                                단 month를 적으면 '일'에는 무조건 '1일'로 반환
 ● SUBSTRING(A.ts, 1, 7) ← 두 번째 인자 위치부터, 세 번째 위치인자까지



※ JOIN 앞에 아무 것도 적지 않으면 INNER JOIN이 된다.
  JOIN CONDITION에 맞는 record 들만 SELECT하고, 매칭이 안되는 것들은 날린다.

  LEFT JOIN 은 왼쪽에 우선순위를 줘서 매칭 후, 왼쪽에 있는 TABLE은 무조건 포함한다.
  RIGHT JOIN은 오른쪽에 우선순위를 주어 매칭 후 오른쪽 TABLE을 무조건 포함한다.


  OUTER FULL JOIN
  매칭과 상관없이 양쪽의 모든 record 들을 반환


※ ORDER BY 와 GROUP BY 
    - 포지션 번호 vs. 필드 이름

   GROUP BY 1 == GROUP BY month == GROUP BY TO_CHAR(A.ts, 'YYYY_MM')


■ 월별 채널별 유니크한 사용자 수 

 ▷ 필요한 정보 - 시간 정보, 사용자 정보, 채널 정보
 ▷ 먼저 어느 테이블을 사용해야하는지 생각!
    ● user_session_channel(userId, sessionId, channel)?
    ● session_timestamp (sessionId, ts)?
    ● 혹은 이 2개의 테이블을 조인해야하나?



 SELECT
    TO_CHAR(A.ts, 'YYYY_MM') AS month,
    channel
    COUNT(DISTINCT B.userId) AS mau
 FROM raw_data.session_timestamp A  
 JOIN raw_data.user_session_channel B ON A.sessionId = B.sessionId
 GROUP BY 1,2               -- 월 안에서 채널이 같은 것도 GROUPING 하므로 더 자세하게 볼 수 있다.
 ORDER BY 1 DESC, 2;        -- 월별 내림차순으로 sorting하되 같은 월별 안에서는 channel별로 오름차순(DESC 안 쓰면 default ASC)


 
